// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModuleBankApp.API.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModuleBankApp.API.Migrations
{
    [DbContext(typeof(ModuleBankAppContext))]
    partial class ModuleBankAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gist");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModuleBankApp.API.Features.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .IsFixedLength();

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Accounts_OwnerId_Hash");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OwnerId"), "HASH");

                    b.HasIndex("Type", "Currency")
                        .HasDatabaseName("IX_Accounts_Type_Currency");

                    b.ToTable("Accounts", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Balance = 1500.00m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "USD",
                            OwnerId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Type = "Checking"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Balance = 5000.00m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "EUR",
                            InterestRate = 3.5m,
                            OwnerId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Type = "Deposit"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Balance = -250.00m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "USD",
                            InterestRate = 15.0m,
                            OwnerId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Type = "Credit"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Balance = 3200.50m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "GBP",
                            OwnerId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Type = "Checking"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Balance = 10000.00m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "USD",
                            InterestRate = 4.2m,
                            OwnerId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Type = "Deposit"
                        });
                });

            modelBuilder.Entity("ModuleBankApp.API.Features.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CounterPartyAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Transactions_CreatedAt_Gist");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CreatedAt"), "GIST");

                    b.HasIndex("AccountId", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_Transactions_AccountId_CreatedAt");

                    b.HasIndex("Type", "Currency")
                        .HasDatabaseName("IX_Transactions_Type_Currency");

                    b.ToTable("Transactions", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01010101-0101-0101-0101-010101010101"),
                            AccountId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Amount = 100.00m,
                            CounterPartyAccountId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "USD",
                            Description = "Перевод на депозитный счет",
                            Type = "Debit"
                        },
                        new
                        {
                            Id = new Guid("02020202-0202-0202-0202-020202020202"),
                            AccountId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Amount = 50.00m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "EUR",
                            Description = "Пополнение через терминал",
                            Type = "Credit"
                        },
                        new
                        {
                            Id = new Guid("03030303-0303-0303-0303-030303030303"),
                            AccountId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Amount = 200.00m,
                            CounterPartyAccountId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "USD",
                            Description = "Погашение кредита",
                            Type = "Credit"
                        },
                        new
                        {
                            Id = new Guid("04040404-0404-0404-0404-040404040404"),
                            AccountId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Amount = 75.50m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "GBP",
                            Description = "Оплата услуг",
                            Type = "Debit"
                        },
                        new
                        {
                            Id = new Guid("05050505-0505-0505-0505-050505050505"),
                            AccountId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Amount = 500.00m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "USD",
                            Description = "Начисление процентов",
                            Type = "Credit"
                        });
                });

            modelBuilder.Entity("ModuleBankApp.API.Features.Transactions.Transaction", b =>
                {
                    b.HasOne("ModuleBankApp.API.Features.Accounts.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ModuleBankApp.API.Features.Accounts.Account", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
